<?xml version="1.0" encoding="utf-8"?>
<project name="build" basedir="." default="build.all">



	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ///////////////////////////////////// PROPERTIES ////////////////////////////////////// -->
	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->

	<!--
		The file contains a single property named typescript.compiler.path which (on Windows)
		contain	system login name, what you may don't want to include in your sources.

	 	Instructions are given in the user.properties.sample file included in the same dir.
	 -->
	<property file="user.properties" />

	<!--
		Standard project properties, including name of the release file to build.
	 -->
	<property file="build.properties" />



	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////////////// MACRO //////////////////////////////////////// -->
	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->

	<!--
		Recursively read a source directory for TypeScript files, generate a compile list in the
		format needed by the TypeScript compiler adding every parameters it takes and finally
		compile it.
	-->
	<macrodef name="TypeScriptRecurse">

		<!-- required parameter -->
		<attribute name="src" />

		<!-- optional parameters -->
		<attribute name="out" default="" />
		<attribute name="module" default="" />
		<attribute name="comments" default="" />
		<attribute name="declarations" default="" />
		<attribute name="nolib" default="" />
		<attribute name="target" default="" />

		<sequential>

			<!-- local properties -->
			<local name="out.arg"/>
			<local name="module.arg"/>
			<local name="comments.arg"/>
			<local name="declarations.arg"/>
			<local name="nolib.arg"/>
			<local name="target.arg"/>
			<local name="typescript.file.list"/>
			<local name="tsc.compile.file.path"/>
			<local name="tsc.compile.file.content"/>

			<property name="tsc.compile.file.path" value="@{src}compile.list" />

			<!-- Optional arguments are not written to compile file when attributes not set -->
			<condition property="out.arg" value="" else='${line.separator}--out "@{out}"'>
				<equals arg1="@{out}" arg2="" />
			</condition>

			<condition property="module.arg" value="" else="${line.separator}--module @{module}">
				<equals arg1="@{module}" arg2="" />
			</condition>

			<!-- Could have been defaulted to ES3 but let the compiler uses its own default is quite better -->
			<condition property="target.arg" value="" else="${line.separator}--target @{target}">
				<equals arg1="@{target}" arg2="" />
			</condition>

			<condition property="removeComments.arg" value="" else="${line.separator}--removeComments">
				<equals arg1="@{removeComments}" arg2="" />
			</condition>

			<condition property="declaration.arg" value="" else="${line.separator}--declaration">
				<equals arg1="@{declaration}" arg2="" />
			</condition>

			<condition property="nolib.arg" value="" else="${line.separator}--nolib">
				<equals arg1="@{nolib}" arg2="" />
			</condition>

			<!-- Recursively read TypeScript source directory and generate a compile list -->
			<pathconvert property="typescript.file.list" dirsep="\" pathsep="${line.separator}">

				<fileset dir="@{src}">
					<include name="**/*.ts" />
				</fileset>

				<!-- In case regexp doesn't work on your computer, comment <mapper /> and uncomment <regexpmapper /> -->
				<mapper type="regexp" from="^(.*)$" to='"\1"' />
				<!--regexpmapper from="^(.*)$" to='"\1"' /-->

			</pathconvert>

			<property name="tsc.compile.file.content" value="${typescript.file.list}${out.arg}${module.arg}${removeComments.arg}${declaration.arg}${nolib.arg}${target.arg}" />

			<!-- Write to the file -->
			<echo message="Writing tsc command line arguments to : ${tsc.compile.file.path}" />
			<echo message="${tsc.compile.file.content}" />
			<echo file="${tsc.compile.file.path}" message="${tsc.compile.file.content}" append="false" />

			<!-- Compile using the generated compile file -->
			<echo message="Calling ${typescript.compiler.path} with ${tsc.compile.file.path}" />
			<exec dir="@{src}" executable="${typescript.compiler.path}">
				<arg value="@${tsc.compile.file.path}"/>
			</exec>

			<!-- Finally delete the compile file -->
			<echo message="${tsc.compile.file.path} deleted" />
			<delete file="${tsc.compile.file.path}" />

		</sequential>

	</macrodef>

	<!--
		When using multiple files TypeScript compiler is unable to add the correct module definition
		when targeting a the single generated JavaScript file. We have to add «manually» the
		standard AMD define wrapper around the generated JavaScript module.
	-->
	<macrodef name="DefineAmdModule">

		<!-- required parameters -->
		<attribute name="in" />
		<attribute name="out" />
		<attribute name="module" />

		<attribute name="paths" default=""/>
		<attribute name="params" default=""/>

		<sequential>

			<local name="file.content"/>

			<replaceregexp file="@{in}"
				match="^"
				replace="        "
				byline="true"
			/>

			<loadfile property="file.content" srcFile="@{in}"/>
			<echo file="@{in}">if( typeof define === "function" )${line.separator}{${line.separator}	define( "@{module}", [@{paths}], function(@{params})${line.separator}	{${line.separator}${file.content}${line.separator}		return @{module};${line.separator}	});${line.separator}}</echo>

		</sequential>

	</macrodef>



	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- /////////////////////////////////////// COMPILE /////////////////////////////////////// -->
	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->

	<target name="compile.src" description="Compile sources files from TypeScript to JavaScript">

		<!-- Compile a single JavaScript file in the bin dir for release -->
		<TypeScriptRecurse
			src="${src.dir}"
			out="${release-file-path}"
			target="ES5"
			module="amd"
		/>
		
		<!-- Add the AMD module define wrapper to the generated module file -->
		<DefineAmdModule
			in="${release-file-path}"
			out="${release-file-path}"
			module="puremvc"
		/>

	</target>

	<target name="compile.test" description="Compile unit tests sources files from TypeScript to JavaScript">

		<!-- Compile a single JavaScript file in the test bin dir ready to run unit tests -->
		<TypeScriptRecurse
			src="${test.src.dir}"
			out="${unit-test-file-path}"
			target="ES5"
			module="amd"
		/>

		<!-- Add the AMD module define wrapper to the generated module file -->
		<DefineAmdModule
			in="${unit-test-file-path}"
			out="${unit-test-file-path}"
			module="test"
			paths="'YUITest','puremvc'"
			params="YUITest,puremvc"
		/>

	</target>



	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- /////////////////////////////////////// MINIFY //////////////////////////////////////// -->
	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->

	<target name="compress" description="Minify the release JavaScript file">

		<taskdef name="yuicompress" classname="com.yahoo.platform.yui.compressor.YUICompressTask">
			<classpath>
				<pathelement path="${yuicompressor.file}" />
				<pathelement path="${yuiant.file}" />
			</classpath>
		</taskdef>

		<yuicompress
			charset="UTF-8"
			linebreak="500"
			warn="false"
			munge="yes"
			preserveallsemicolons="false"
			preservestringlitterals="false"
			outputfolder="${src.bin.dir}"
			outputsuffix="-min"
		>
			<fileset dir="${src.bin.dir}">
				<include name="*.js"/>
			</fileset>
		</yuicompress>

	</target>



	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////////////// CLEAN //////////////////////////////////////// -->
	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->

	<target name="clean.src.bin" description="Clean bin directory">

		<delete>
			<fileset dir="${src.bin.dir}">
				<include name="*.js" />
			</fileset>
		</delete>

	</target>

	<target name="clean.test.bin" description="Clean test bin directory">

		<delete>
			<fileset dir="${test.bin.dir}">
				<include name="*.js" />
			</fileset>
		</delete>

	</target>

	<target name="clean.src" description="Clean src directory from any JavaScript file automatically generated by the TypeScript compiler">

		<delete>
			<fileset dir="${src.dir}">
				<include name="**/*.js" />
			</fileset>
		</delete>

	</target>

	<target name="clean.test" description="Clean test sources directory from any JavaScript file automatically generated by the TypeScript compiler">

		<delete>
			<fileset dir="${test.src.dir}">
				<include name="**/*.js" />
			</fileset>
		</delete>

	</target>



	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////////////// BUILD //////////////////////////////////////// -->
	<!-- /////////////////////////////////////////////////////////////////////////////////////// -->

	<target
		name="build.src"
		description="Compile src from TypeScript to JavaScript, concatenate and minify it into a single file"
		depends=
		"
			clean.src.bin,
			compile.src,
			clean.src,
			compress
		"
	/>

	<target
		name="build.test"
		description="Compile tests from TypeScript to JavaScript"
		depends="
			clean.test.bin,
			compile.test,
			clean.test
		"
	/>

	<target
		name="build.all"
		description="Compile both TypeScript sources and Unit Tests to JavaScript, concatenate and minify release JavaScript library"
		depends="
			build.src,
			build.test
		"
	/>

</project>
